from django import forms
from Customers.models import Customer
from django.core.exceptions import ValidationError

class ContactForm(forms.Form):
    subject = forms.CharField()
    email = forms.EmailField()
    message = forms.CharField()
    
class RegisterForm(forms.Form):
    first_name = forms.CharField(widget=forms.TextInput(attrs={'class':'registerInput'}))
    last_name = forms.CharField(widget=forms.TextInput(attrs={'class':'registerInput'}))
    email = forms.EmailField(widget=forms.EmailInput(attrs={'class':'registerInput'}), error_messages = {'email_taken': 'Your Email Confirmation Not Equal With Your Email'})
    orginization = forms.CharField(widget=forms.TextInput(attrs={'class':'registerInput'}),required=False)
    password = forms.CharField(widget=forms.PasswordInput(attrs={'class':'registerInput'}))
    confirm_password = forms.CharField(widget=forms.PasswordInput(attrs={'class':'registerInput'}))
    
    
    
    def clean_email(self):
        try:
            Customer.objects.filter(email=self.email).get()
        except:
            raise ValidationError(self.fields['email'].error_messages['email_not_found'])

class LoginForm(forms.Form):
    email = forms.EmailField(widget=forms.EmailInput(attrs={'class':'registerInput'}),error_messages = {'email_not_found': 'Email Address was not found'})
    password = forms.CharField(widget=forms.PasswordInput(attrs={'class':'registerInput'}))
    
    def clean_email(self):
        try:
            Customer.objects.filter(email=self.email).get()
        except:
            raise ValidationError(self.fields['email'].error_messages['email_not_found'])
        return self.email
    
    def clean_password(self):
        try:
            Customer.objects.filter(email=self.email).get()
            
    
        
        